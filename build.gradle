buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

plugins {
    id 'org.springframework.boot' version '1.5.8.RELEASE'
    id 'org.detoeuf.swagger-codegen' version '1.7.4'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'docker'

swagger {
    inputSpec = "${project.projectDir}/src/main/resources/swagger/employeeAppraisals-api.yml"
    outputDir = "${project.projectDir}/src/main/swagger"
    addDynamicProperty 'sourceFolder', 'generated'
    lang = 'spring'
    additionalProperties = [
            'invokerPackage': 'com.gft.swagger.employees.invoker',
            'modelPackage'  : 'com.gft.swagger.employees.model',
            'apiPackage'    : 'com.gft.swagger.employees.api',
            'dateLibrary'   : 'java8',
            'interfaceOnly' : true,
            'useTags'       : true
    ]
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDir file("${project.projectDir}/src/main/swagger/generated")
        }
    }
}

group = 'com.gft'
version = '0.0.1-SNAPSHOT'
description = 'GFT-EmployeeAppraisal'

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

ext {
    hibernateVersion = '5.2.11.Final'
    flywayVersion = '4.2.0'
    postgresqlVersion = '42.1.4'
    springFoxSwaggerVersion = '2.7.0'
    jacksonVersion = '2.9.2'
    jsr310Version = '2.9.2'
    orikaVersion = '1.5.2'
    springCloudVersion = 'Dalston.SR4'
    gradleWrapperVersion = '4.3'
}

dependencies {

    // Web
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-actuator')

    // Security
    compile('org.springframework.boot:spring-boot-starter-security')

    // OAuth2 + JWT
    compile('org.springframework.cloud:spring-cloud-starter-oauth2')
    compile('org.springframework.security:spring-security-jwt')

    // Eureka
    compile('org.springframework.cloud:spring-cloud-starter-eureka')

    // Database
    compile('org.springframework.boot:spring-boot-starter-data-jpa') {
        exclude group: 'org.hibernate' // Hibernate 5.0.12 does not support java.time properly.
    }
    compile("org.hibernate:hibernate-core:${hibernateVersion}")
    compile("org.hibernate:hibernate-entitymanager:${hibernateVersion}")
    compile("org.flywaydb:flyway-core:${flywayVersion}")
    compile('com.h2database:h2') // Local development
    compile group: 'org.postgresql', name: 'postgresql', version: "${postgresqlVersion}" // CI DEV database

    // Swagger
    compile("io.springfox:springfox-swagger2:${springFoxSwaggerVersion}")
    compile("io.springfox:springfox-swagger-ui:${springFoxSwaggerVersion}")
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: "${jacksonVersion}"
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: "${jacksonVersion}"
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: "${jacksonVersion}"
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "${jsr310Version}"

    // Orika
    compile("ma.glasnost.orika:orika-core:${orikaVersion}")

    // Test
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
    testCompile('org.mockito:mockito-core:2.+')
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// The purpose of this is that every time that the code compiles, it will generate the Swagger auto generated classes,
// preventing anyone from working directly on them.
tasks.compileJava.dependsOn 'swagger'

test {
    // Ensure all tests are run in a single JVM so that Spring's Application Context is cached and reused
    // See https://docs.spring.io/spring/docs/current/spring-framework-reference/html/integration-testing.html#testcontext-ctx-management-caching
    setForkEvery(null)
    setMaxParallelForks(1)
}

task buildDockerCI(type: Docker, dependsOn: build) {
    tag = 'com.gft.employee-appraisal.ci'
    tagVersion = 'latest'
    baseImage = 'openjdk:alpine'
    push = false // Would push to a Docker Hub account
    applicationName = jar.baseName
    addFile {
        from jar
        rename { 'app.jar' }
    }
    entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/app.jar'])
}

task buildDockerQA(type: Docker, dependsOn: build) {
    tag = 'com.gft.employee-appraisal.qa'
    tagVersion = 'latest'
    baseImage = 'openjdk:alpine'
    push = false // Would push to a Docker Hub account
    applicationName = jar.baseName
    addFile {
        from jar
        rename { 'app.jar' }
    }
    entryPoint(['java', '-Djava.security.egd=file:/dev/./urandom', '-jar', '/app.jar'])
}

// Avoids distribution version to be changed from ALL to BIN in gradle-wrapper.properties
wrapper.gradleVersion = gradleWrapperVersion
wrapper.distributionType = Wrapper.DistributionType.ALL