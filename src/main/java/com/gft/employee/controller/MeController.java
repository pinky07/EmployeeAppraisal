package com.gft.employee.controller;

import com.gft.employee.converter.employee.EmployeeDTOFromEntity;
import com.gft.employee.exception.EmployeeNotFoundException;
import com.gft.employee.model.Employee;
import com.gft.employee.service.DTOService;
import com.gft.employee.service.EmployeeService;
import com.gft.swagger.employees.api.MeApi;
import com.gft.swagger.employees.model.EmployeeDTO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Controller class that implements the /me API endpoints generated by Swagger via its interface.
 *
 * @author Ruben Jimenez
 * @author Manuel Yepez
 */
@Controller
public class MeController implements MeApi {

    private Logger logger = LoggerFactory.getLogger(MeController.class);

    @Autowired
    private EmployeeService employeeService;

    @Autowired
    private DTOService dtoService;

    @Autowired
    private EmployeeDTOFromEntity employeeDTOFromEntity;

    /**
     * Obtains all the employee info (delimited on the Employee microservice) for the authenticated user.
     *
     * @return {@link EmployeeDTO} Entity with all the information pertinent to the authenticated user.
     */
    @Override
    public ResponseEntity<EmployeeDTO> meGet() {

        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /me ", user.getEmail());

        // Set Result DTO
        EmployeeDTO result;
        result = employeeDTOFromEntity.map(user);
        dtoService.setEmployeeDTOFlags(result, user);

        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    /**
     * Obtains all the mentor info associated to the authenticated user.
     *
     * @return {@link EmployeeDTO} Entity with all the information pertinent to the mentor of the authenticated user.
     */
    @Override
    public ResponseEntity<EmployeeDTO> meMentorGet() {

        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /me/mentor ", user.getEmail());

        // Find Mentor
        Employee mentor = employeeService.findCurrentMentorById(user.getId())
                .orElseThrow(() -> new EmployeeNotFoundException(String.format(
                        "Mentor for Employee with Id %s was not found",
                        user.getId())));

        // Set Result DTO
        EmployeeDTO result = employeeDTOFromEntity.map(mentor);
        dtoService.setEmployeeDTOFlags(result, mentor);

        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    /**
     * Obtains all the peers associated to the authenticated user.
     *
     * @return {@link List<EmployeeDTO>} List of peers associated to the authenticated user.
     */
    @Override
    public ResponseEntity<List<EmployeeDTO>> mePeersGet() {
		// Get logged in user
		Employee user = this.employeeService.getLoggedInUser();
        logger.debug("Endpoint called: me/peers({})", user.getEmail());
        List<EmployeeDTO> result = new ArrayList<>();

        HttpStatus status;

		employeeService.findCurrentPeersById(user.getId())
				.forEach(peer -> result.add(employeeDTOFromEntity.map(peer)));
		status = result.isEmpty() ? HttpStatus.NOT_FOUND : HttpStatus.OK;

        return new ResponseEntity<>(result, status);
    }

    @Override
    public ResponseEntity<List<EmployeeDTO>> meMenteesGet() {

        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /me/mentees ", user.getEmail());

        // Find Mentees and set result
        List<EmployeeDTO> result = employeeService
                .findCurrentMenteesById(user.getId())
                .map(mentee -> {
                    EmployeeDTO menteeDTO = employeeDTOFromEntity.map(mentee);
                    dtoService.setEmployeeDTOFlags(menteeDTO, mentee);
                    return menteeDTO;
                })
                .collect(Collectors.toList());

        return new ResponseEntity<>(result, HttpStatus.OK);
    }
}
