package com.gft.employeeappraisal.controller;

import com.gft.employeeappraisal.converter.appraisal.AppraisalDTOConverter;
import com.gft.employeeappraisal.converter.employeeevaluationform.EmployeeEvaluationFormDTOConverter;
import com.gft.employeeappraisal.converter.evaluationformtemplate.EvaluationFormTemplateDTOConverter;
import com.gft.employeeappraisal.exception.NotFoundException;
import com.gft.employeeappraisal.model.*;
import com.gft.employeeappraisal.service.AppraisalService;
import com.gft.employeeappraisal.service.EmployeeEvaluationFormService;
import com.gft.employeeappraisal.service.EmployeeService;
import com.gft.employeeappraisal.service.SecurityService;
import com.gft.swagger.employees.api.AppraisalApi;
import com.gft.swagger.employees.model.AppraisalDTO;
import com.gft.swagger.employees.model.EmployeeEvaluationFormDTO;
import com.gft.swagger.employees.model.EvaluationFormTemplateDTO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;

import java.util.List;
import java.util.stream.Collectors;

/**
 * Controller class that implements the /appraisals API endpoints generated by Swagger via its interface.
 *
 * @author Ruben Jimenez
 * @author Manuel Yepez
 */
@Controller
public class AppraisalsController implements AppraisalApi {

    private final Logger logger = LoggerFactory.getLogger(AppraisalsController.class);

    // Services
    private final AppraisalService appraisalService;
    private final EmployeeService employeeService;
    private final EmployeeEvaluationFormService employeeEvaluationFormService;
    private final SecurityService securityService;

    // DTO converters
    private final AppraisalDTOConverter appraisalDTOConverter;
    private final EmployeeEvaluationFormDTOConverter employeeEvaluationFormDTOConverter;
    private final EvaluationFormTemplateDTOConverter evaluationFormTemplateDTOConverter;

    /**
     * Creates an instance of this class.
     *
     * @param appraisalService                   Appraisal service
     * @param employeeService                    Employee service
     * @param employeeEvaluationFormService      EmployeeEvaluationForm service
     * @param securityService                    Security service
     * @param appraisalDTOConverter              Appraisal to AppraisalDTO bidirectional converter
     * @param evaluationFormTemplateDTOConverter EvaluationFormTemplate to EvaluationFormTemplateDTO bidirectional converter
     */
    @Autowired
    public AppraisalsController(
            AppraisalService appraisalService,
            EmployeeService employeeService,
            EmployeeEvaluationFormService employeeEvaluationFormService,
            SecurityService securityService,
            AppraisalDTOConverter appraisalDTOConverter,
            EmployeeEvaluationFormDTOConverter employeeEvaluationFormDTOConverter,
            EvaluationFormTemplateDTOConverter evaluationFormTemplateDTOConverter) {
        this.appraisalService = appraisalService;
        this.employeeService = employeeService;
        this.employeeEvaluationFormService = employeeEvaluationFormService;
        this.securityService = securityService;
        this.appraisalDTOConverter = appraisalDTOConverter;
        this.employeeEvaluationFormDTOConverter = employeeEvaluationFormDTOConverter;
        this.evaluationFormTemplateDTOConverter = evaluationFormTemplateDTOConverter;
    }

    /**
     * Returns all {@link Appraisal} objects for an specific {@link Employee}
     * GET /employees/:id/appraisals
     *
     * @param employeeId {@link Employee} to look up
     * @return A List of {@link AppraisalDTO} objects
     */
    @Override
    public ResponseEntity<List<AppraisalDTO>> employeesIdAppraisalsGet(
            @PathVariable Integer employeeId) {
        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /employees/{}/appraisals", user.getEmail(), employeeId);
        return this.employeesIdAppraisalsGet(user, user.getId());
    }

    /**
     * Returns a list of EvaluationForm for an specific appraisal of the given user.
     * GET /employees/:id/appraisals/:id/forms
     *
     * @param employeeId  Employee whose EvaluationForm are desired
     * @param appraisalId Appraisal to which the returned list of EvaluationForm belongs to
     * @return List of desired EvaluationForm
     */
    @Override
    public ResponseEntity<List<EmployeeEvaluationFormDTO>> employeesIdAppraisalsIdFormsGet(
            @PathVariable("employeeId") Integer employeeId,
            @PathVariable("appraisalId") Integer appraisalId) {
        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /employees/{}/appraisals/{}/forms", user.getEmail(), employeeId, appraisalId);
        return this.employeesIdAppraisalsIdFormsGet(user, employeeId, appraisalId);
    }

    /**
     * Returns an {@link EvaluationFormTemplateDTO} for an specific {@link Appraisal} and {@link Employee}.
     * GET /employees/:id/appraisals/:id/forms/:id
     *
     * @param employeeId  {@link Employee} to look up
     * @param appraisalId {@link Appraisal} to look up
     * @param formId      {@link EvaluationFormTemplateDTO} to look up
     * @return {@link EvaluationFormTemplateDTO} if the 3 parameters correspond to each other.
     */
    @Override
    public ResponseEntity<EvaluationFormTemplateDTO> employeesIdAppraisalsIdFormsIdGet(
            @PathVariable("employeeId") Integer employeeId,
            @PathVariable("appraisalId") Integer appraisalId,
            @PathVariable("formId") Integer formId) {
        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /employees/{}/appraisals/{}/forms/{}", user.getEmail(), employeeId, appraisalId, formId);
        return this.employeesIdAppraisalsIdFormsIdGet(user, employeeId, appraisalId, formId);
    }

    /**
     * Returns an {@link AppraisalDTO} if the {@link Employee} participated in the given {@link Appraisal}.
     * GET /employees/:id/appraisals/:id
     *
     * @param employeeId  {@link Employee} to look up
     * @param appraisalId {@link Appraisal} to look up
     * @return An {@link AppraisalDTO} if the {@link Employee} was part of the given {@link Appraisal}
     */
    @Override
    public ResponseEntity<AppraisalDTO> employeesIdAppraisalsIdGet(
            @PathVariable Integer employeeId,
            @PathVariable Integer appraisalId) {
        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /employees/{}/appraisals/{}", user.getEmail(), employeeId, appraisalId);
        return employeesIdAppraisalsIdGet(user, employeeId, appraisalId);
    }

    /**
     * Returns all {@link Appraisal} objects of the authenticated user.
     * GET /me/appraisals
     *
     * @return A List of {@link AppraisalDTO} objects
     */
    @Override
    public ResponseEntity<List<AppraisalDTO>> meAppraisalsGet() {
        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /me/appraisals", user.getEmail());
        return this.employeesIdAppraisalsGet(user, user.getId());
    }

    /**
     * Returns a list of EvaluationForm for an specific appraisal of the authenticated user.
     * GET /me/appraisals/:id/forms
     *
     * @param appraisalId Appraisal to which the returned list of EvaluationForm belongs to
     * @return List of desired EvaluationForm
     */
    @Override
    public ResponseEntity<List<EmployeeEvaluationFormDTO>> meAppraisalsIdFormsGet(
            @PathVariable("appraisalId") Integer appraisalId) {
        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /me/appraisals/{}/forms", user.getEmail(), appraisalId);
        return this.employeesIdAppraisalsIdFormsGet(user, user.getId(), appraisalId);
    }

    /**
     * Returns an {@link EvaluationFormTemplateDTO} for an specific {@link Appraisal} and the authenticated user.
     * GET /me/appraisals/:id/forms/:id
     *
     * @param appraisalId {@link Appraisal} to look up
     * @param formId      {@link EvaluationFormTemplateDTO} to look up
     * @return {@link EvaluationFormTemplateDTO} if the 2 parameters and the authenticated user correspond to each other.
     */
    @Override
    public ResponseEntity<EvaluationFormTemplateDTO> meAppraisalsIdFormsIdGet(
            @PathVariable("appraisalId") Integer appraisalId,
            @PathVariable("formId") Integer formId) {
        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /me/appraisals/{}/forms/{}", user.getEmail(), appraisalId, formId);
        return this.employeesIdAppraisalsIdFormsIdGet(user, user.getId(), appraisalId, formId);
    }

    /**
     * Returns an {@link AppraisalDTO} if the logged in {@link Employee} participated in the given {@link Appraisal}.
     * GET /me/:id/appraisals/:id
     *
     * @param appraisalId {@link Appraisal} to look up
     * @return An {@link AppraisalDTO} if the logged in {@link Employee} was part of the given {@link Appraisal}
     */
    @Override
    public ResponseEntity<AppraisalDTO> meAppraisalsIdGet(
            @PathVariable Integer appraisalId) {
        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /me/appraisals/{}", user.getEmail(), appraisalId);
        return employeesIdAppraisalsIdGet(user, user.getId(), appraisalId);
    }

    /**
     * Executes the logic for these endpoints:
     * - GET /employees/:id/appraisals
     * - GET /me/appraisals
     *
     * @param loggedInUser Logged in {@link Employee}
     * @param employeeId   {@link Employee} Id
     * @return A list of {@link AppraisalDTO} objects
     */
    private ResponseEntity<List<AppraisalDTO>> employeesIdAppraisalsGet(
            Employee loggedInUser,
            int employeeId) {

        // Get Employee
        Employee employee = employeeService.getById(employeeId);

        // Get Appraisals
        List<Appraisal> appraisalList = this.employeeEvaluationFormService
                .findSelfByEmployee(employee)
                .map(EmployeeEvaluationForm::getAppraisalXEvaluationFormTemplate)
                .map(AppraisalXEvaluationFormTemplate::getAppraisal)
                .collect(Collectors.toList());

        // Security check
        appraisalList.forEach(appraisal -> this.securityService.canReadAppraisal(loggedInUser, employee, appraisal));

        // Get DTOs
        List<AppraisalDTO> appraisalDTOList = appraisalList
                .stream()
                .map(appraisalDTOConverter::convert)
                .collect(Collectors.toList());

        return new ResponseEntity<>(appraisalDTOList, HttpStatus.OK);
    }

    /**
     * Executes the logic for these endpoints:
     * - GET /employees/:id/appraisals/:id/forms
     * - GET /me/appraisals/:id/forms
     *
     * @param loggedInUser Logged in {@link Employee}
     * @param employeeId   {@link Employee} Id
     * @param appraisalId  {@link Appraisal} Id
     * @return A list of {@link EmployeeEvaluationFormDTO} objects
     */
    private ResponseEntity<List<EmployeeEvaluationFormDTO>> employeesIdAppraisalsIdFormsGet(
            Employee loggedInUser,
            int employeeId,
            int appraisalId) {

        // Get Employee
        Employee employee = employeeService.getById(employeeId);

        // Get Appraisal
        Appraisal appraisal = appraisalService.getById(appraisalId);

        // Add all EmployeeEvaluationForms where the Employee is the Employee
        List<EmployeeEvaluationForm> employeeEvaluationFormList = this.employeeEvaluationFormService
                .findByEmployeeAndAppraisal(employee, appraisal)
                .collect(Collectors.toList());

        // Add all EmployeeEvaluationForms where the Employee is the FilledByEmployee
        employeeEvaluationFormList.addAll(this.employeeEvaluationFormService
                .findByFilledByEmployeeAndAppraisal(employee, appraisal)
                .collect(Collectors.toList()));

        // Add all EmployeeEvaluationForms where the Employee is the Mentor
        employeeEvaluationFormList.addAll(this.employeeEvaluationFormService
                .findByMentorAndAppraisal(employee, appraisal)
                .collect(Collectors.toList()));

        // Select distinct EmployeeEvaluationForms
        employeeEvaluationFormList = employeeEvaluationFormList
                .stream()
                .distinct()
                .collect(Collectors.toList());

        // Security check
        employeeEvaluationFormList
                .stream()
                .forEach(employeeEvaluationForm -> this.securityService.canReadEmployeeEvaluationForm(loggedInUser, employeeEvaluationForm));

        // Get DTOs
        List<EmployeeEvaluationFormDTO> result = employeeEvaluationFormList
                .stream()
                .map(employeeEvaluationForm -> employeeEvaluationFormDTOConverter.convert(employeeEvaluationForm))
                .collect(Collectors.toList());

        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    /**
     * Executes the logic for these endpotins:
     * - GET /employees/:id/appraisals/:id/forms/:id
     * - GET /me/appraisals/:id/forms/:id
     *
     * @param loggedInUser Logged in {@link Employee}
     * @param employeeId   {@link Employee} Id
     * @param appraisalId  {@link Appraisal} Id
     * @param formId       {@link EvaluationFormTemplate} Id
     * @return
     */
    private ResponseEntity<EvaluationFormTemplateDTO> employeesIdAppraisalsIdFormsIdGet(
            Employee loggedInUser,
            int employeeId,
            int appraisalId,
            int formId) {

        // Get Employee
        Employee employee = employeeService.getById(employeeId);

        // Security check
        this.securityService.canReadEvaluationFormTemplate(loggedInUser, employee);

        // Get Appraisal
        Appraisal appraisal = appraisalService.getById(appraisalId);

        // TODO The following code should be improved by implementing a query that fetches exactly the record needed.

        // Get EmployeeEvaluationForm list
        EvaluationFormTemplate evaluationFormTemplate = this.employeeEvaluationFormService
                .findByEmployeeAndAppraisal(employee, appraisal)
                .map(EmployeeEvaluationForm::getAppraisalXEvaluationFormTemplate)
                .map(AppraisalXEvaluationFormTemplate::getEvaluationFormTemplate)
                .filter(evaluationFormTemplateFilter -> evaluationFormTemplateFilter.getId() == formId)
                .findFirst()
                .orElseThrow(() -> new NotFoundException(String.format(
                        "EvaluationFormTemplate[%d] was not found or doesn't belong to Employee[%d] in Appraisal[%d]",
                        formId,
                        employeeId,
                        appraisalId)));

        // Get DTO
        EvaluationFormTemplateDTO evaluationFormTemplateDTO = evaluationFormTemplateDTOConverter.convert(evaluationFormTemplate);

        return new ResponseEntity<>(evaluationFormTemplateDTO, HttpStatus.OK);
    }

    /**
     * Executes the logic for these endpoints:
     * - GET /employees/:id/appraisals/:id
     * - GET /me/:id/appraisals/:id
     *
     * @param loggedInUser Logged in {@link Employee}
     * @param employeeId   {@link Employee} Id
     * @param appraisalId  {@link Appraisal} Id
     * @return A list of {@link AppraisalDTO} objects
     */
    private ResponseEntity<AppraisalDTO> employeesIdAppraisalsIdGet(
            Employee loggedInUser,
            int employeeId,
            int appraisalId) {

        // Get Employee
        Employee employee = employeeService.getById(employeeId);

        // Get Appraisal
        Appraisal appraisal = appraisalService.getById(appraisalId);

        // Security check
        this.securityService.canReadAppraisal(loggedInUser, employee, appraisal);

        // Check if the employee was indeed part of the appraisal
        if (!this.employeeEvaluationFormService
                .findSelfByEmployeeAndAppraisal(employee, appraisal)
                .isPresent()) {
            throw new NotFoundException(String.format(
                    "Employee[%d] was not part of Appraisal[%d]",
                    employeeId,
                    appraisalId));
        }

        return new ResponseEntity<>(appraisalDTOConverter.convert(appraisal), HttpStatus.OK);
    }

}
