package com.gft.employeeappraisal.controller;

import com.gft.employeeappraisal.converter.appraisal.AppraisalDTOConverter;
import com.gft.employeeappraisal.converter.evaluationform.EvaluationFormDTOConverter;
import com.gft.employeeappraisal.exception.NotFoundException;
import com.gft.employeeappraisal.model.*;
import com.gft.employeeappraisal.service.AppraisalService;
import com.gft.employeeappraisal.service.AppraisalXEvaluationFormXEmployeeRelationshipService;
import com.gft.employeeappraisal.service.EmployeeService;
import com.gft.swagger.employees.api.AppraisalApi;
import com.gft.swagger.employees.model.AppraisalDTO;
import com.gft.swagger.employees.model.EvaluationFormDTO;
import org.apache.commons.lang.NotImplementedException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Controller class that implements the /appraisals API endpoints generated by Swagger via its interface.
 *
 * @author Ruben Jimenez
 * @author Manuel Yepez
 */
@Controller
public class AppraisalsController implements AppraisalApi {

    private final Logger logger = LoggerFactory.getLogger(AppraisalsController.class);

    private final AppraisalService appraisalService;
    private final EmployeeService employeeService;
    private final AppraisalXEvaluationFormXEmployeeRelationshipService appraisalXEvaluationFormXEmployeeRelationshipService;
    private final AppraisalDTOConverter appraisalDTOConverter;
    private final EvaluationFormDTOConverter evaluationFormDTOConverter;

    @Autowired
    public AppraisalsController(
            AppraisalService appraisalService,
            EmployeeService employeeService,
            AppraisalXEvaluationFormXEmployeeRelationshipService appraisalXEvaluationFormXEmployeeRelationshipService,
            AppraisalDTOConverter appraisalDTOConverter,
            EvaluationFormDTOConverter evaluationFormDTOConverter) {
        this.appraisalService = appraisalService;
        this.employeeService = employeeService;
        this.appraisalXEvaluationFormXEmployeeRelationshipService = appraisalXEvaluationFormXEmployeeRelationshipService;
        this.appraisalDTOConverter = appraisalDTOConverter;
        this.evaluationFormDTOConverter = evaluationFormDTOConverter;
    }

    @Override
    public ResponseEntity<AppraisalDTO> employeesIdAppraisalsIdGet(@PathVariable Integer employeeId,
                                                                   @PathVariable Integer appraisalId) {
        Employee employee = employeeService.getById(employeeId);

        // Get Appraisal
        Appraisal appraisal = appraisalService.findById(appraisalId)
                .orElseThrow(() -> new NotFoundException(String.format(
                        "Appraisal with id %d was not found", appraisalId)));

        // Check if the employee was indeed part of the appraisal
        AppraisalDTO result = appraisalXEvaluationFormXEmployeeRelationshipService
                .findByAppraisalAndEmployeeAndSourceRelationships(appraisal, employee, RelationshipName.SELF)
                .map(AppraisalXEvaluationFormXEmployeeRelationship::getAppraisalXEvaluationForm)
                .map(AppraisalXEvaluationForm::getAppraisal)
                .findFirst().map(appraisalDTOConverter::convert).orElse(new AppraisalDTO());

        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    /**
     * Returns a list of EvaluationForm for an specific appraisal of the given user.
     * GET /employees/:id/appraisals/:id/forms
     *
     * @param employeeId  Employee whose EvaluationForm are desired
     * @param appraisalId Appraisal to which the returned list of EvaluationForm belongs to
     * @return List of desired EvaluationForm
     */
    @Override
    public ResponseEntity<List<EvaluationFormDTO>> employeesIdAppraisalsIdFormsGet(
            @PathVariable("employeeId") Integer employeeId,
            @PathVariable("appraisalId") Integer appraisalId) {

        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /employees/{}/appraisals/{}/forms", user.getEmail(), employeeId, appraisalId);

        // TODO Implement this method!
        throw new NotImplementedException();
    }

    @Override
    public ResponseEntity<EvaluationFormDTO> employeesIdAppraisalsIdFormsIdGet(
            @PathVariable("employeeId") Integer employeeId,
            @PathVariable("appraisalId") Integer appraisalId,
            @PathVariable("formId") Integer formId) {

        // TODO Implement this method!
        throw new NotImplementedException();
    }

    @Override
    public ResponseEntity<List<AppraisalDTO>> employeesIdAppraisalsGet(@PathVariable Integer employeeId,
                                                                       @RequestParam(value = "status", required = false)
                                                                               List<String> statusList) {
        logger.debug("Called endpoint: GET /employees/{}/appraisals", employeeId);

        List<AppraisalDTO> result = new ArrayList<>();
        Employee employee = employeeService.getById(employeeId);

        appraisalService.findEmployeeAppraisals(employee, null)
                .forEach(ea -> result.add(appraisalDTOConverter.convert(ea)));

        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<AppraisalDTO> meAppraisalsIdGet(@PathVariable Integer appraisalId) {

        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /me/appraisals/{}", user.getEmail(), appraisalId);

        // Get Appraisal
        Appraisal appraisal = appraisalService.findById(appraisalId)
                .orElseThrow(() -> new NotFoundException(String.format(
                        "Appraisal with id %d was not found", appraisalId)));

        // Check if the employee was indeed part of the appraisal
        AppraisalDTO result = appraisalXEvaluationFormXEmployeeRelationshipService
                .findByAppraisalAndEmployeeAndSourceRelationships(appraisal, user, RelationshipName.SELF)
                .map(AppraisalXEvaluationFormXEmployeeRelationship::getAppraisalXEvaluationForm)
                .map(AppraisalXEvaluationForm::getAppraisal)
                .findFirst().map(appraisalDTOConverter::convert).orElse(new AppraisalDTO());

        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<List<AppraisalDTO>> meAppraisalsGet(@RequestParam(value = "status", required = false)
                                                                      List<String> statusList) {
        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /me/appraisals", user.getEmail());

        List<AppraisalDTO> result = new ArrayList<>();
        appraisalService
                .findEmployeeAppraisals(user, null)
                .forEach(ea -> result.add(appraisalDTOConverter.convert(ea)));

        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    /**
     * Returns a list of EvaluationForm for an specific appraisal of the authenticated user.
     * GET /me/appraisals/:id/forms
     *
     * @param appraisalId Appraisal to which the returned list of EvaluationForm belongs to
     * @return List of desired EvaluationForm
     */
    @Override
    public ResponseEntity<List<EvaluationFormDTO>> meAppraisalsIdFormsGet(
            @PathVariable("appraisalId") Integer appraisalId) {

        // Get logged in user
        Employee user = this.employeeService.getLoggedInUser();
        logger.debug("{} called endpoint: GET /me/appraisals/{}/forms", user.getEmail(), appraisalId);

        // Get Appraisal
        Appraisal appraisal = appraisalService.findById(appraisalId)
                .orElseThrow(() -> new NotFoundException(String.format(
                        "Appraisal with id %d was not found", appraisalId)));

        // Get Evaluation Forms
        List<EvaluationFormDTO> result = this.appraisalXEvaluationFormXEmployeeRelationshipService.findByAppraisalAndEmployee(
                appraisal,
                user)
                .map(AppraisalXEvaluationFormXEmployeeRelationship::getAppraisalXEvaluationForm)
                .map(AppraisalXEvaluationForm::getEvaluationForm)
                .map(evaluationFormDTOConverter::convert)
                .collect(Collectors.toList());

        return new ResponseEntity<>(result, HttpStatus.OK);
    }

    @Override
    public ResponseEntity<EvaluationFormDTO> meAppraisalsIdFormsIdGet(
            @PathVariable("appraisalId") Integer appraisalId,
            @PathVariable("formId") Integer formId) {

        // TODO Implement this method!
        throw new NotImplementedException();
    }
}
