
# Swagger version
swagger: '2.0'

# API Information
info:
  title: |
    GFT Employee Appraisals API
  description: |
    GFT Employee Appraisals API specification
  version: 1.0.0

# URL Information
host: example.gft.com
schemes:
  - https

# Security Definition
securityDefinitions:
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: http://localhost:8888/uaa/oauth/authorize
    tokenUrl: http://localhost:8888/uaa/oauth/token
    scopes:
      employee: Employee access
      appraisal: Appraisal access
security:
  - OAuth2: [employee, appraisal]

# Endpoints
paths:
########################################################################################################################
# /test ##################################################################################################################
########################################################################################################################

  '/test':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Me
      summary: |
        Provides information about the authenticated user.
      description: |
        Returns an `Employee` with information about the authenticated user.
      operationId: meTest
      produces:
        - application/json
      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            The user is authenticated, but is not yet registered in the system.

########################################################################################################################
# /me ##################################################################################################################
########################################################################################################################

  '/me':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Me
      summary: |
        Provides information about the authenticated user.
      description: |
        Returns an `Employee` with information about the authenticated user.
      operationId: meGet
      produces:
        - application/json
      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            The user is authenticated, but is not yet registered in the system.

########################################################################################################################
# /me ##################################################################################################################
########################################################################################################################

  '/me':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Me
      summary: |
        Provides information about the authenticated user.
      description: |
        Returns an `Employee` with information about the authenticated user.
      operationId: meGet
      produces:
        - application/json
      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            The user is authenticated, but is not yet registered in the system.

########################################################################################################################
# /me/appraisals #######################################################################################################
########################################################################################################################

  '/me/appraisals':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Appraisal
      summary: |
        Provides a list of appraisals for the authenticated user.
      description: |
        Returns a list of `Appraisal` belonging to the authenticated user.
      operationId: meAppraisalsGet
      produces:
        - application/json
      responses:
        '200':
          description: |
            Successful.
          schema:
            type: array
            items:
              $ref: '#/definitions/AppraisalDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            The user is authenticated, but is not yet registered in the system.

########################################################################################################################
# /me/appraisals/:id ###################################################################################################
########################################################################################################################

  '/me/appraisals/{appraisalId}':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Appraisal
      summary: |
        Provides a specific appraisal for the authenticated user.
      description: |
        Returns an `Appraisal` belonging to the authenticated user.
      operationId: meAppraisalsIdGet
      produces:
        - application/json
      parameters:
        - in: path
          name: appraisalId
          type: integer
          required: true
          description: |
            `Appraisal` Id.
      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/AppraisalDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            Appraisal not found in the system.

########################################################################################################################
# /me/appraisals/:id/forms #############################################################################################
########################################################################################################################

  '/me/appraisals/{appraisalId}/forms':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Appraisal
      summary: |
        Provides a list of `EvaluationForm` of a specific appraisal for the authenticated user.
      description: |
        Returns a list of `EvaluationForm` belonging to the authenticated user.
      operationId: meAppraisalsIdFormsGet
      produces:
        - application/json
      parameters:
        - in: path
          name: appraisalId
          type: integer
          required: true
          description: |
            `Appraisal` Id.
      responses:
        '200':
          description: |
            Successful.
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeEvaluationFormDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            Appraisal not found in the system.

########################################################################################################################
# /me/appraisals/:id/forms/:id #########################################################################################
########################################################################################################################

  '/me/appraisals/{appraisalId}/forms/{formId}':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Appraisal
      summary: |
        Provides a specific `EvaluationForm` of a specific appraisal for the authenticated user.
      description: |
        Returns a particular `EvaluationForm` belonging to the authenticated user.
      operationId: meAppraisalsIdFormsIdGet
      produces:
        - application/json
      parameters:
        - in: path
          name: appraisalId
          type: integer
          required: true
          description: |
            `Appraisal` Id.
        - in: path
          name: formId
          type: integer
          required: true
          description: |
            `Form` Id.
      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/EvaluationFormTemplateDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            Appraisal or EvaluationForm not found in the system.

########################################################################################################################
# /me/mentor ###########################################################################################################
########################################################################################################################

  '/me/mentor':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Me
      summary: |
        Provides the mentor associated to the authenticated user.
      description: |
        Returns an `Employee`, which is the mentor of the authenticated user.
      operationId: meMentorGet
      produces:
        - application/json
      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            The user is authenticated, but is not yet registered in the system.

########################################################################################################################
# /me/mentees ##########################################################################################################
########################################################################################################################

  '/me/mentees':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Me
      summary: |
        Provides the mentees associated to the authenticated user.
      description: |
        Returns an `Employee` list who are mentees of the authenticated user.
      operationId: meMenteesGet
      produces:
        - application/json
      responses:
        '200':
          description: |
            Successful.
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            The user is authenticated, but is not yet registered in the system.

########################################################################################################################
# /me/peers ############################################################################################################
########################################################################################################################

  '/me/peers':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Me
      summary: |
        Provides the peers associated to the authenticated user.
      description: |
        Returns a list of `Employee`, meaning the list of peers associated to the authenticated user.
      operationId: mePeersGet
      produces:
        - application/json
      responses:
        '200':
          description: |
            Successful.
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            The user is authenticated, but is not yet registered in the system.

########################################################################################################################
# /employees ###########################################################################################################
########################################################################################################################

  '/employees':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Employee
      summary: |
        Returns a list of all employees.
      description: |
        Returns an `Employee` list only if the user has the **Admin** application role.
      operationId: employeesGet
      produces:
        - application/json
      parameters:
        - in: query
          name: searchTerm
          type: string
          required: false
          description: |
            Optional string search term.
        - in: query
          name: page
          type: integer
          required: false
          default: 0
          description: |
            Page number. Defaults to 0.
        - in: query
          name: size
          type: integer
          required: false
          description: |
            Number of elements in each page. Defaults to 10.
          default: 10
      responses:
        '200':
          description: |
            Successful.
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.

    ###########
    # POST ####
    ###########

    post:
      tags:
      - Employee
      summary: |
        Registers a new employee.
      description: |
        Registers a new `Employee`. Users with the **Admin** applicationRole, can register any users. Otherwise they can
        only register themselves and will get an error if they try to register any other users.
      operationId: employeesPost
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: employee
          schema:
            $ref: '#/definitions/EmployeeDTO'
          required: true
          description: |
            `Employee` GFT Login.
      responses:
        '201':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/OperationResultDTO'
          headers:
            Location:
              type: string
              description: |
                URL of the new employee.
        '400':
          description: |
            Input was malformed or did not comply with business rules.
          schema:
            $ref: '#/definitions/OperationResultDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '422':
          description: |
            Entity already exists.
          schema:
            $ref: '#/definitions/OperationResultDTO'

    ###########
    # PUT #####
    ###########

    put:
      tags:
      - Employee
      summary: |
        Registers or updates an employee.
      description: |
        Registers or updates an `Employee`. If the user has the **Admin** applicationRole, they can create or update any
        users. Otherwise they can only create or update themselves and will get an error if they try to create or update
        any other users.
      operationId: employeesPut
      consumes:
        - application/json
      parameters:
        - in: body
          name: employee
          schema:
            $ref: '#/definitions/EmployeeDTO'
          required: true
          description: |
            `Employee` to create or update.
      responses:
        '200':
          description: |
            Successful.
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.

########################################################################################################################
# /employees/{employeeId} ##############################################################################################
########################################################################################################################

  '/employees/{employeeId}':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Employee
      summary: |
        Returns an employee.
      description: |
        Returns an `Employee` with the specified Id. If the user has the **Admin** applicationRole, they can retrieve
        information from any `Employee`. Otherwise they can only retrieve information on themselves.
      operationId: employeesIdGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            An `Employee` with the specified Id was not found.

    ###########
    # PUT #####
    ###########

    put:
      tags:
      - Employee
      summary: |
        Updates a specific employee.
      description: |
        Updates an `Employee`. If the user has the **Admin** applicationRole, they can update any users. Otherwise they
        can only update themselves and will get an error if they try to update any other users.
      operationId: employeesIdPut
      consumes:
        - application/json
      parameters:
        - in: body
          name: employee
          schema:
            $ref: '#/definitions/EmployeeDTO'
          required: true
          description: |
            `Employee` to update.
      responses:
        '200':
          description: |
            Successful.
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            An `Employee` with the specified Id was not found.

    ###########
    # DELETE ##
    ###########

    delete:
      tags:
      - Employee
      summary: |
        Deletes a specific employee.
      description: |
        Deletes an `Employee`. If the user has the **Admin** applicationRole, they can delete any users. Other users
        can't delete themselves.
      operationId: employeesIdDelete
      responses:
        '200':
          description: |
            Successful.
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            An `Employee` with the specified Id was not found.

########################################################################################################################
# /employees/{employeeId}/mentees ######################################################################################
########################################################################################################################

  '/employees/{employeeId}/mentees':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Employee
      summary: |
        Returns the employee mentees.
      description: |
        Returns the mentees associated to an specified `Employee`. An user with the **Admin** application role can see
        the mentees of any `Employee`. An user with the **Mentor** applicationRole can only see their own mentees. Any
        other user can't access this endpoint.
      operationId: employeesIdMenteesGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
      responses:
        '200':
          description: |
            Successful.
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            An `Employee` with the specified Id was not found.

########################################################################################################################
# /employees/{employeeId}/mentor #######################################################################################
########################################################################################################################

  '/employees/{employeeId}/mentor':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Employee
      summary: |
        Returns the mentor associated to the employee.
      description: |
        Returns the mentor associated to an specified `Employee`. An user with the **Admin** application role can see
        the mentor of any `Employee`. Any other user can only obtain his own mentor.
      operationId: employeesIdMentorGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            An `Employee` with the specified Id was not found.

    ###########
    # PUT #####
    ###########

    put:
      tags:
      - Employee
      summary: |
        Associates a mentor to the employee.
      description: |
        Associates a mentor to an specified `Employee`. Can only be used by an user with the **Admin** applicationRole.
      operationId: employeesIdMentorPut
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
        - in: body
          name: mentor
          schema:
            $ref: '#/definitions/EmployeeDTO'
          required: true
          description: |
            `Employee` Mentor.
      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/OperationResultDTO'
        '400':
          description: |
            Input was malformed.
          schema:
            $ref: '#/definitions/OperationResultDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            An `Employee` with the specified Id was not found.

   ###########
    # DELETE #####
    ###########

    delete:
      tags:
      - Employee
      summary: |
        Disassociates a mentor to the employee.
      description: |
        Disassociates a mentor to an specified `Employee`. Can only be used by an user with the **Admin** applicationRole.
      operationId: employeesIdMentorDelete
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/OperationResultDTO'
        '400':
          description: |
            Input was malformed.
          schema:
            $ref: '#/definitions/OperationResultDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
          schema:
            $ref: '#/definitions/OperationResultDTO'
        '404':
          description: |
            An `Employee` with the specified Id was not found.
          schema:
            $ref: '#/definitions/OperationResultDTO'
        '422':
          description: |
            User does not have a mentor.

########################################################################################################################
# /employees/{employeeId}/appraisals ###################################################################################
########################################################################################################################

  '/employees/{employeeId}/appraisals':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Appraisal
      summary: |
        Returns the appraisals of the specified employee.
      description: |
        Returns an `Appraisal` list belonging to the specified employee
      operationId: employeesIdAppraisalsGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          required: true
          type: integer
          description: |
            `Employee` Id.
      responses:
        '200':
          description: |
            Successful.
          schema:
            type: array
            items:
              $ref: '#/definitions/AppraisalDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            An `Employee` with the specified Id was not found.

########################################################################################################################
# /employees/{employeeId}/appraisals/{appraisalId} #####################################################################
########################################################################################################################

  '/employees/{employeeId}/appraisals/{appraisalId}':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Appraisal
      summary: |
        Returns a certain appraisal of the specified employee.
      description: |
        Returns a single `Appraisal` belonging to the specified employee
      operationId: employeesIdAppraisalsIdGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          required: true
          type: integer
          description: |
            `Employee` Id.
        - in: path
          name: appraisalId
          required: true
          type: integer
          description: |
            `Appraisal` Id.
      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/AppraisalDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            An `Employee` or `Appraisal` with the specified Id was not found.

#########################################################################################################################
# /employees/:id/appraisals/:id/forms ###################################################################################
#########################################################################################################################

  '/employees/{employeeId}/appraisals/{appraisalId}/forms':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Appraisal
      summary: |
        Provides a list of `EvaluationForm` of a specific appraisal for the specified user.
      description: |
        Returns a list of `EvaluationForm` belonging to the specified user.
      operationId: employeesIdAppraisalsIdFormsGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
        - in: path
          name: appraisalId
          type: integer
          required: true
          description: |
            `Appraisal` Id.
      responses:
        '200':
          description: |
            Successful.
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeEvaluationFormDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            Employee or Appraisal not found in the system.
    ###########
    # PUT #####
    ###########

    put:
      tags:
      - Appraisal
      summary: |
         Registers or updates an `Employee on `EvaluationForm` of a specific appraisal for the specified user.
      description: |
       Registers or updates an `Employee on `EvaluationForm` belonging to the specified user.
      operationId: employeesIdAppraisalsIdFormsPut
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
        - in: path
          name: appraisalId
          type: integer
          required: true
          description: |
            `Appraisal` Id.
        - in: body
          name: employee
          schema:
            $ref: '#/definitions/EmployeeEvaluationFormDTO'
          required: true
          description: |
           `Employee` to create or update.

      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/EmployeeEvaluationFormDTO'
        '400':
          description: |
            Input was malformed.
          schema:
            $ref: '#/definitions/EmployeeEvaluationFormDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            Employee, Appraisal or EvaluationForm not found in the system.

########################################################################################################################
# /employees/:id/appraisals/:id/forms/:id ##############################################################################
########################################################################################################################

  '/employees/{employeeId}/appraisals/{appraisalId}/forms/{formId}':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Appraisal
      summary: |
        Provides a specific `EvaluationForm` of a specific appraisal for the specified user.
      description: |
        Returns a particular `EvaluationForm` belonging to the specified user.
      operationId: employeesIdAppraisalsIdFormsIdGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
        - in: path
          name: appraisalId
          type: integer
          required: true
          description: |
            `Appraisal` Id.
        - in: path
          name: formId
          type: integer
          required: true
          description: |
            `Form` Id.
      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/EvaluationFormTemplateDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            Employee, Appraisal or EvaluationForm not found in the system.


    ###########
    # PUT #####
    ###########

    put:
      tags:
      - Appraisal
      summary: |
         Registers or updates an `Employee on `EvaluationForm` of a specific appraisal for the specified user.
      description: |
       Registers or updates an `Employee on `EvaluationForm` belonging to the specified user.
      operationId: employeesIdAppraisalsIdFormsIdPut
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
        - in: path
          name: appraisalId
          type: integer
          required: true
          description: |
            `Appraisal` Id.
        - in: path
          name: formId
          type: integer
          required: true
          description: |
            `Form` Id.
        - in: body
          name: employee
          schema:
              $ref: '#/definitions/EvaluationFormTemplateDTO'
          required: true
          description: |
              `Employee` to create or update.
      responses:
        '200':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/EvaluationFormTemplateDTO'
        '400':
          description: |
            Input was malformed.
          schema:
            $ref: '#/definitions/EvaluationFormTemplateDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            Employee, Appraisal or EvaluationForm not found in the system.


########################################################################################################################
# /employees/:id/relationships #########################################################################################
########################################################################################################################

  '/employees/{employeeId}/relationships':

    ###########
    # GET #####
    ###########

    get:
      tags:
      - Employee
      summary: |
        Returns the relationships with other employees
      description: |
        Returns an `EmployeeRelationship` list of all employees who have relationships with the specified employee
      operationId: employeesIdRelationshipsGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          required: true
          type: integer
          description: |
            `Employee` Id.
        - in: query
          name: exclude
          required: false
          type: array
          collectionFormat: csv
          items:
            type: string
          description: |
            Filters out the specified relationship types. Separated by coma values.
        - in: query
          name: Comments
          required: false
          type: string
          description: |
              Filters out relationships prior to the specified comments.
        - in: query
          name: startDate
          required: false
          type: string
          format: datetime
          description: |
            Filters out relationships prior to the specified start date.
        - in: query
          name: endDate
          required: false
          type: string
          format: datetime
          description: |
            Filters out relationships subsequent to the specified end date.
        - in: query
          name: current
          required: false
          type: boolean
          allowEmptyValue: true
          description: |
            Filters out historic relationships. StartDate and EndDate have precedence over this parameter.

      responses:
        '200':
          description: |
            Successful.
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeRelationshipDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            An `Employee` with the specified Id was not found.

    ###########
    # POST ####
    ###########

    post:
      tags:
      - Employee
      summary: |
        Registers a new Relationship between two employees.
      description: |
        Registers a new `Relationship`. Users with the **Mentor** application role, can create relationships for their
        mentees. Users with the **Admin** application role, can create any relationships. Users with any other 
        application role will receive an error.
      operationId: employeesIdRelationshipsPost
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          required: true
          type: integer
          description: |
            `Employee` Id.
        - in: body
          name: relationship
          schema:
            $ref: '#/definitions/EmployeeRelationshipDTO'
          required: true
          description: |
            New `Relationship`.
      responses:
        '201':
          description: |
            Successful.
          schema:
            $ref: '#/definitions/OperationResultDTO'
          headers:
            Location:
              type: string
              description: |
                URL of the new employee.
        '400':
          description: |
            Input was malformed or did not comply with business rules.
          schema:
            $ref: '#/definitions/OperationResultDTO'
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '422':
          description: |
            Entity already exists.
          schema:
            $ref: '#/definitions/OperationResultDTO'

########################################################################################################################
# /employees/:id/relationships/ ########################################################################################
########################################################################################################################

  '/employees/{employeeId}/relationships/{relationshipId}':

    ###########
    # DELETE ##
    ###########

    delete:
      tags:
      - Employee
      summary: |
        Deletes a Relationship.
      description: |
        Deletes a `Relationship`. Users with the **Mentor** application role, can delete relationships of their mentees.
        Users with the **Admin** application role, can delete any relationships. Users with any other application role
        will receive an error.
      operationId: employeesIdRelationshipsIdDelete
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          required: true
          type: integer
          description: |
            `Employee` Id.
        - in: path
          name: relationshipId
          required: true
          type: integer
          description: |
            `Relationship` Id.
      responses:
        '200':
          description: |
            Successful.
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            An entity with the specified Id wasn't found.

########################################################################################################################
# /relationships/:id ###################################################################################################
########################################################################################################################

  '/relationships':
    get:
      tags:
        - Employee
      summary: |
        Obtains all Relationship entities.
      description: |
        Fetches all Relationship entities from database. Refer to the database model for details.
      operationId: relationshipsGet
      produces:
        - application/json
      responses:
        '200':
          schema:
            type: array
            items:
              $ref: '#/definitions/RelationshipTypeDTO'
          description: |
            Successful.
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.

########################################################################################################################
# /relationships/:id ###################################################################################################
########################################################################################################################

  '/relationships/{relationshipId}':
    get:
      tags:
        - Employee
      summary: |
        Obtains a Relationship entity.
      description: |
        Fetches a single Relationship entity from database. Refer to the database model for details.
      operationId: relationshipsIdGet
      produces:
        - application/json
      parameters:
        - in: path
          name: relationshipId
          required: true
          type: integer
          description: |
            `Relationship` Id.
      responses:
        '200':
          schema:
            $ref: '#/definitions/RelationshipTypeDTO'
          description: |
            Successful.
        '403':
          description: |
            The user isn't authenticated or authorized to perform this action.
        '404':
          description: |
            An entity with the specified Id wasn't found.

########################################################################################################################
# Definitions ##########################################################################################################
########################################################################################################################

#
# Note: Keep the definitions ordered alphabetically!
#

definitions:

  ApplicationRoleDTO:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
    required:
      - id

  AppraisalDTO:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      startDate:
        type: string
        format: 'date-time'
      endDate:
        type: string
        format: 'date-time'

  AnswerDTO:
      type: object
      properties:
        id:
          type: integer
        evaluationFormTemplateXSectionXQuestionDTO:
          $ref: '#/definitions/EvaluationFormTemplateXSectionXQuestionDTO'
        scoreValue:
          $ref: '#/definitions/ScoreValueDTO'
        comment:
          type: string
      required:
        - id

  EmployeeDTO:
    type: object
    properties:
      id:
        type: integer
      jobLevel:
        $ref: '#/definitions/JobLevelDTO'
      applicationRole:
        $ref: '#/definitions/ApplicationRoleDTO'
      email:
        type: string
      gftIdentifier:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      isAdmin:
        type: boolean
      isMentor:
        type: boolean
      isPeer:
        type: boolean

  EmployeeEvaluationFormDTO:
    type: object
    properties:
      id:
        type: integer
      employee:
        $ref: '#/definitions/EmployeeDTO'
      filledByEmployee:
        $ref: '#/definitions/EmployeeDTO'
      mentor:
        $ref: '#/definitions/EmployeeDTO'
      createDate:
        type: string
        format: 'date-time'
      submitDate:
        type: string
        format: 'date-time'
      comments:
        type: string
      evaluationFormId:
        type: integer
      answers:
        type: array
        items:
         $ref: '#/definitions/AnswerDTO'

  EvaluationFormTemplateXSectionXQuestionDTO:
    type: object
    properties:
      id:
        type: integer
      question:
       type: array
       items:
         $ref: '#/definitions/QuestionDTO'
    required:
      - id


  EmployeeRelationshipDTO:
    type: object
    properties:
      id:
        type: integer
      referred:
        $ref: '#/definitions/EmployeeDTO'
      comments:
        type: string
      startDate:
        type: string
        format: 'date-time'
      endDate:
        type: string
        format: 'date-time'
      relationshipType:
        $ref: '#/definitions/RelationshipTypeDTO'
    required:
      - id

  EvaluationFormTemplateDTO:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      sections:
        type: array
        items:
          $ref: '#/definitions/SectionDTO'

  FieldErrorDTO:
    type: object
    properties:
      field:
        type: string
      message:
        type: string

  JobFamilyDTO:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
    required:
      - id

  JobLevelDTO:
    type: object
    properties:
      id:
        type: integer
      jobFamily:
        $ref: '#/definitions/JobFamilyDTO'
      name:
        type: string
      description:
        type: string
      expertise:
        type: string
    required:
      - id

  Link:
    type: object
    properties:
      rel:
        type: string
      href:
        type: string
    example:
      rel: self
      href: 'http://example.com/some/url/'

  OperationResultDTO:
    type: object
    properties:
      message:
        type: string
      data:
        type: object
      errors:
        type: array
        items:
          $ref: '#/definitions/FieldErrorDTO'

  Pagination:
    type: array
    items:
      $ref: '#/definitions/Link'
    example:
      - rel: next
        href: 'http://example.com/some/url?page=2'
      - rel: prev
        href: 'http://example.com/some/url?page=1'
      - rel: first
        href: 'http://example.com/some/url?page=1'
      - rel: last
        href: 'http://example.com/some/url?page=100'

  QuestionDTO:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      position:
        type: integer

  RelationshipTypeDTO:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string

  ScoreTypeDTO:
    type: object
    properties:
      id:
        type: integer
      definition:
        type: string
      scoreValues:
        type: array
        items:
          $ref: '#/definitions/ScoreValueDTO'

  ScoreValueDTO:
    type: object
    properties:
      id:
        type: integer
      value:
        type: string
      description:
        type: string
      descriptionOfAboveFourOption:
         type: string
      scoreType:
         type: array
         items:
          $ref: '#/definitions/ScoreTypeDTO'

  SectionDTO:
   type: object
   properties:
      id:
        type: integer
      scoreType:
        $ref: '#/definitions/ScoreTypeDTO'
      name:
        type: string
      description:
        type: string
      position:
        type: integer
      questions:
        type: array
        items:
          $ref: '#/definitions/QuestionDTO'

  SectionDescriptionDTO:
   type: object
   properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
########################################################################################################################
# Tags #################################################################################################################
########################################################################################################################

tags:
  - name: Me
    description: Part of the Me controller
  - name: Employee
    description: Part of the Employee controller
  - name: Appraisal
    description: Part of the Appraisal controller

