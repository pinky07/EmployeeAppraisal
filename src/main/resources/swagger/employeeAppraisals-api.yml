
# Swagger version
swagger: '2.0'

# API Information
info:
  title: |
    GFT Employee Appraisals API
  description: |
    GFT Employee Appraisals API specification
  version: 1.0.0

# URL Information
host: example.com
schemes:
  - https

# Security Definition
securityDefinitions:
  OAuth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: http://localhost:8888/uaa/oauth/authorize
    tokenUrl: http:/localhost:8888/uaa/oauth/token
    scopes:
      employee: Employee access
      appraisal: Appraisal access
security:
  - OAuth2: [employee, appraisal]

# Endpoints
paths:

###################################################################################################
# /me #############################################################################################
###################################################################################################

  '/me':
    get:
      tags:
      - Me
      summary: |
        Provides information about the authenticated user.
      description: >
        Returns an `Employee` with information about the authenticated user.
      operationId: meGet
      produces:
        - application/json
      responses:
        '200':
          description: |
            Successful request.
          schema:
            $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated.
        '404':
          description: |
            The user is authenticated, but is not yet registered in the system.

###################################################################################################
# /me/appraisals ##################################################################################
###################################################################################################

  '/me/appraisals':
    get:
      tags:
      - Appraisal
      summary: |
        Provides a list of appraisals for the authenticated user.
      description: >
        Returns a list of `Appraisal` belonging to the authenticated user.
      operationId: meAppraisalsGet
      produces:
        - application/json
      parameters:
        - in: query
          name: status
          required: false
          type: array
          collectionFormat: csv
          items:
            type: string
          description: |
            Filter for obtaining the appraisals in which the employee has participated or pending appraisals.
            Having no parameter will return all the appraisals, both pending and done.
      responses:
        '200':
          description: |
            Successful request.
          schema:
            type: array
            items:
              $ref: '#/definitions/AppraisalDTO'
        '403':
          description: |
            The user isn't authenticated.
        '404':
          description: |
            The user is authenticated, but is not yet registered in the system.

###################################################################################################
# /me/appraisals/:id ##############################################################################
###################################################################################################

  '/me/appraisals/{appraisalId}':
    get:
      tags:
      - Appraisal
      summary: |
        Provides a specific appraisal for the authenticated user.
      description: >
        Returns an `Appraisal` belonging to the authenticated user.
      operationId: meAppraisalsAppraisalIdGet
      produces:
        - application/json
      parameters:
        - in: path
          name: appraisalId
          type: integer
          required: true
          description: |
            `Appraisal` Id.
      responses:
        '200':
          description: |
            Successful request.
          schema:
            $ref: '#/definitions/AppraisalDTO'
        '403':
          description: |
            The user isn't authenticated or tried to retrieve an appraisal to which he does not have permission.
        '404':
          description: |
            Appraisal not found in the system.

###################################################################################################
# /me/appraisals/:id/forms ########################################################################
###################################################################################################

  '/me/appraisals/{appraisalId}/forms':
    get:
      tags:
      - Appraisal
      summary: |
        Provides a list of `EvaluationForm` of a specific appraisal for the authenticated user.
      description: >
        Returns a list of `EvaluationForm` belonging to the authenticated user.
      operationId: meAppraisalsAppraisalIdFormsGet
      produces:
        - application/json
      parameters:
        - in: path
          name: appraisalId
          type: integer
          required: true
          description: |
            `Appraisal` Id.
      responses:
        '200':
          description: |
            Successful request.
          schema:
            type: array
            items:
              $ref: '#/definitions/EvaluationFormDTO'
        '403':
          description: |
            The user isn't authenticated or tried to retrieve an appraisal to which he does not have permission.
        '404':
          description: |
            Appraisal not found in the system.

###################################################################################################
# /me/appraisals/:id/forms/:id ####################################################################
###################################################################################################

  '/me/appraisals/{appraisalId}/forms/{formId}':
    get:
      tags:
      - Appraisal
      summary: |
        Provides a specific `EvaluationForm` of a specific appraisal for the authenticated user.
      description: >
        Returns a particular `EvaluationForm` belonging to the authenticated user.
      operationId: meAppraisalsAppraisalIdFormsFormIdGet
      produces:
        - application/json
      parameters:
        - in: path
          name: appraisalId
          type: integer
          required: true
          description: |
            `Appraisal` Id.
        - in: path
          name: formId
          type: integer
          required: true
          description: |
            `Form` Id.
      responses:
        '200':
          description: |
            Successful request.
          schema:
            $ref: '#/definitions/EvaluationFormDTO'
        '403':
          description: |
            The user isn't authenticated or tried to retrieve an EvaluationForm to which he does not have permission.
        '404':
          description: |
            Appraisal or EvaluationForm not found in the system.

###################################################################################################
# /me/mentor ######################################################################################
###################################################################################################

  '/me/mentor':
    get:
      tags:
      - Me
      summary: |
        Provides the mentor associated to the authenticated user.
      description: |
        Returns an `Employee`, which is the mentor of the authenticated user.
      operationId: meMentorGet
      produces:
        - application/json
      responses:
        '200':
          description: |
            Successful request.
          schema:
            $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated.
        '404':
          description: |
            The user is authenticated, but is not yet registered in the system.

###################################################################################################
# /me/mentees #####################################################################################
###################################################################################################

  '/me/mentees':
    get:
      tags:
      - Me
      summary: |
        Provides the mentees associated to the authenticated user.
      description: |
        Returns an `Employee` list who are mentees of the authenticated user.
      operationId: meMenteesGet
      produces:
        - application/json
      responses:
        '200':
          description: |
            Successful request.
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated.
        '404':
          description: |
            The user is authenticated, but is not yet registered in the system.

###################################################################################################
# /me/peers #######################################################################################
###################################################################################################

  '/me/peers':
    get:
      tags:
      - Me
      summary: |
        Provides the peers associated to the authenticated user.
      description: |
        Returns a list of `Employee`, meaning the list of peers associated to the authenticated user.
      operationId: mePeersGet
      produces:
        - application/json
      responses:
        '200':
          description: |
            Successful request.
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated.
        '404':
          description: |
            The user is authenticated, but is not yet registered in the system.

###################################################################################################
# /employees ######################################################################################
###################################################################################################

  '/employees':
    get:
      tags:
      - Employee
      summary: |
        Returns a list of all employees.
      description: |
        Returns an `Employee` list only if the user has the **Admin** application role.
      operationId: employeesGet
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: integer
          required: false
          default: 1
          description: |
            Page number. Defaults to 1.
        - in: query
          name: size
          type: integer
          required: false
          description: |
            Number of elements in each page. Defaults to 10.
          default: 10
      responses:
        '200':
          description: |
            Successful request.
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated or doesn't have the **Admin** applicationRole.
    post:
      tags:
      - Employee
      summary: |
        Registers a new employee.
      description: >
        Registers a new `Employee`. Users with the **Admin** applicationRole, can
        register any users. Otherwise they can only register themselves and will get
        an error if they try to register any other users.
      operationId: employeesPost
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: employee
          schema:
            $ref: '#/definitions/EmployeeDTO'
          required: true
          description: |
            `Employee` GFT Login.
      responses:
        '201':
          description: |
            New `Employee` registered.
          schema:
            $ref: '#/definitions/OperationResultDTO'
          headers:
            Location:
              type: string
              description: |
                URL of the new employee.
        '400':
          description: |
            Input was malformed or did not comply with business rules.
          schema:
            $ref: '#/definitions/OperationResultDTO'
        '403':
          description: |
            The user isn't authenticated or doesn't have the **Admin** applicationRole.
        '422':
          description: |
            A user with the same GFT Identifier already exists.
          schema:
            $ref: '#/definitions/OperationResultDTO'
    put:
      tags:
      - Employee
      summary: |
        Registers or updates an employee.
      description: >
        Registers or updates an `Employee`. If the user has the **Admin** applicationRole,
        they can create or update any users. Otherwise they can only create or
        update themselves and will get an error if they try to create or update
        any other users.
      operationId: employeesPut
      consumes:
        - application/json
      parameters:
        - in: body
          name: employee
          schema:
            $ref: '#/definitions/EmployeeDTO'
          required: true
          description: |
            `Employee` to create or update.
      responses:
        '200':
          description: |
            Successful request.
        '403':
          description: >
            The user isn't authenticated or doesn't have the **Admin** applicationRole and is trying
            to register or update an user other than himself.

###################################################################################################
# /employees/{employeeId} #########################################################################
###################################################################################################

  '/employees/{employeeId}':
    get:
      tags:
      - Employee
      summary: |
        Returns an employee.
      description: >
        Returns an `Employee` with the specified Id. If the user has the
        **Admin** applicationRole, they can retrieve information from any `Employee`.
        Otherwise they can only retrieve information on themselves.
      operationId: employeesEmployeeIdGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
      responses:
        '200':
          description: |
            OK
          schema:
            $ref: '#/definitions/EmployeeDTO'
        '403':
          description: >
            The user isn't authenticated or doesn't have the **Admin** applicationRole and is trying
            to get information of an user other than themself.
        '404':
          description: |
            An `Employee` with the specified Id was not found.
    put:
      tags:
      - Employee
      summary: |
        Updates a specific employee.
      description: >
        Updates an `Employee`. If the user has the **Admin** applicationRole, they can update any users.
        Otherwise they can only update themselves and will get an error if they try to update
        any other users.
      operationId: employeesEmployeeIdPut
      consumes:
        - application/json
      parameters:
        - in: body
          name: employee
          schema:
            $ref: '#/definitions/EmployeeDTO'
          required: true
          description: |
            `Employee` to update.
      responses:
        '200':
          description: |
            Successful request.
        '403':
          description: >
            The user isn't authenticated or doesn't have the **Admin** applicationRole and is trying
            to register or update an user other than themself.
        '404':
          description: |
            An `Employee` with the specified Id was not found.
    delete:
      tags:
      - Employee
      summary: |
        Deletes a specific employee.
      description: >
        Deletes an `Employee`. If the user has the **Admin** applicationRole, they can delete any users.
        Other users can't delete themselves.
      operationId: employeesEmployeeIdDelete
      responses:
        '200':
          description: |
            Successful request.
        '403':
          description: >
            The user isn't authenticated or doesn't have the **Admin** applicationRole.
        '404':
          description: |
            An `Employee` with the specified Id was not found.

###################################################################################################
# /employees/{employeeId}/mentees #################################################################
###################################################################################################

  '/employees/{employeeId}/mentees':
    get:
      tags:
      - Employee
      summary: |
        Returns the employee mentees.
      description: >
        Returns the mentees associated to an specified `Employee`. An user with the **Admin** applicationRole
        can see the mentees of any `Employee`. An user with the **Mentor** applicationRole can only see their
        own mentees. Any other user can't access this endpoint.
      operationId: employeesEmployeeIdMenteesGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
      responses:
        '200':
          description: |
            Successful request.
        '403':
          description: |
            The user isn't authenticated or is trying to access resources not authorized to.
        '404':
          description: |
            An `Employee` with the specified Id was not found.
    post:
      tags:
      - Employee
      summary: |
        Add a mentee to an employee.
      description: |
        Adds a mentee to an `Employee`. Only users with the **Admin** can perform this action.
      operationId: employeesEmployeeIdMenteesPost
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
      responses:
        '200':
          description: |
            Successful request.
        '403':
          description: |
            The user isn't authenticated or doesn't have the **Admin** applicationRole.
        '404':
          description: |
            An `Employee` with the specified Id was not found.

##################################################################################################
# /employees/{employeeId}/mentor #################################################################
##################################################################################################

  '/employees/{employeeId}/mentor':
    get:
      tags:
      - Employee
      summary: |
        Returns the mentor associated to the employee.
      description: >
        Returns the mentor associated to an specified `Employee`. An user with the **Admin**
        applicationRole can see the mentor of any `Employee`. Any other user can only obtain his own mentor.
      operationId: employeesEmployeeIdMentorGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
      responses:
        '200':
          description: |
            Successful request.
          schema:
            $ref: '#/definitions/EmployeeDTO'
        '403':
          description: |
            The user isn't authenticated or is trying to access resources not authorized to.
        '404':
          description: |
            An `Employee` with the specified Id was not found.
    put:
      tags:
      - Employee
      summary: |
        Associates a mentor to the employee.
      description: >
        Associates a mentor to an specified `Employee`. Can only be used by an user with the
        **Admin** applicationRole.
      operationId: employeesEmployeeIdMentorPut
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
        - in: body
          name: mentor
          schema:
            $ref: '#/definitions/EmployeeDTO'
          required: true
          description: |
            `Employee` Mentor.
      responses:
        '200':
          description: |
            Successful request.
          schema:
            $ref: '#/definitions/OperationResultDTO'
        '400':
          description: |
            Input was malformed.
          schema:
            $ref: '#/definitions/OperationResultDTO'
        '403':
          description: |
            The user isn't authenticated or is trying to access resources not authorized to.
        '404':
          description: |
            An `Employee` with the specified Id was not found.

##################################################################################################
# /employees/{employeeId}/relationships ##########################################################
##################################################################################################

  '/employees/{employeeId}/relationships':
    get:
      tags:
      - Employee
      summary: |
        Returns the relationships with other employees
      description: >
        Returns an `EmployeeRelationship` list of all employees who have relationships
        with the specified employee
      operationId: employeesEmployeeIdRelationshipsGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          required: true
          type: integer
          description: |
            `Employee` Id.
        - in: query
          name: exclude
          required: false
          type: array
          collectionFormat: csv
          items:
            type: string
          description: |
            Filters out the specified relationship types. Separated by coma values.
        - in: query
          name: startDate
          required: false
          type: string
          format: datetime
          description: |
            Filters out relationships prior to the specified start date.
        - in: query
          name: endDate
          required: false
          type: string
          format: datetime
          description: |
            Filters out relationships subsequent to the specified end date.
        - in: query
          name: current
          required: false
          type: boolean
          allowEmptyValue: true
          description: |
            Filters out historic relationships. StartDate and EndDate have precedence over this parameter.
      responses:
        '200':
          description: |
            Successful request.
          schema:
            type: array
            items:
              $ref: '#/definitions/EmployeeRelationshipDTO'
        '403':
          description: |
            The user isn't authenticated or is trying to access resources not authorized to.
        '404':
          description: |
            An `Employee` with the specified Id was not found.

##################################################################################################
# /employees/{employeeId}/appraisals #############################################################
##################################################################################################

  '/employees/{employeeId}/appraisals':
    get:
      tags:
      - Appraisal
      summary: |
        Returns the appraisals of the specified employee.
      description: >
        Returns an `Appraisal` list belonging to the specified employee
      operationId: employeesEmployeeIdAppraisalsGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          required: true
          type: integer
          description: |
            `Employee` Id.
      responses:
        '200':
          description: |
            Successful request.
          schema:
            type: array
            items:
              $ref: '#/definitions/AppraisalDTO'
        '403':
          description: |
            The user isn't authenticated or is trying to access resources not authorized to.
        '404':
          description: |
            An `Employee` with the specified Id was not found.

##################################################################################################
# /employees/{employeeId}/appraisals/{appraisalId} ###############################################
##################################################################################################

  '/employees/{employeeId}/appraisals/{appraisalId}':
    get:
      tags:
      - Appraisal
      summary: |
        Returns a certain appraisal of the specified employee.
      description: >
        Returns a single `Appraisal` belonging to the specified employee
      operationId: employeesEmployeeIdAppraisalsAppraisalIdGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          required: true
          type: integer
          description: |
            `Employee` Id.
        - in: path
          name: appraisalId
          required: true
          type: integer
          description: |
            `Appraisal` Id.
      responses:
        '200':
          description: |
            Successful request.
          schema:
            $ref: '#/definitions/AppraisalDTO'
        '403':
          description: |
            The user isn't authenticated or is trying to access resources not authorized to.
        '404':
          description: |
            An `Employee` or `Appraisal` with the specified Id was not found.

###################################################################################################
# /employees/:id/appraisals/:id/forms #############################################################
###################################################################################################

  '/employees/{employeeId}/appraisals/{appraisalId}/forms':
    get:
      tags:
      - Appraisal
      summary: |
        Provides a list of `EvaluationForm` of a specific appraisal for the specified user.
      description: >
        Returns a list of `EvaluationForm` belonging to the specified user.
      operationId: employeesEmployeeIdAppraisalsAppraisalIdFormsGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
        - in: path
          name: appraisalId
          type: integer
          required: true
          description: |
            `Appraisal` Id.
      responses:
        '200':
          description: |
            Successful request.
          schema:
            type: array
            items:
              $ref: '#/definitions/EvaluationFormDTO'
        '403':
          description: |
            The user isn't authenticated or tried to retrieve an appraisal to which he does not have permission.
        '404':
          description: |
            Employee or Appraisal not found in the system.

###################################################################################################
# /employees/:id/appraisals/:id/forms/:id ####################################################################
###################################################################################################

  '/employees/{employeeId}/appraisals/{appraisalId}/forms/{formId}':
    get:
      tags:
      - Appraisal
      summary: |
        Provides a specific `EvaluationForm` of a specific appraisal for the specified user.
      description: >
        Returns a particular `EvaluationForm` belonging to the specified user.
      operationId: employeesEmployeeIdAppraisalsAppraisalIdFormsFormIdGet
      produces:
        - application/json
      parameters:
        - in: path
          name: employeeId
          type: integer
          required: true
          description: |
            `Employee` Id.
        - in: path
          name: appraisalId
          type: integer
          required: true
          description: |
            `Appraisal` Id.
        - in: path
          name: formId
          type: integer
          required: true
          description: |
            `Form` Id.
      responses:
        '200':
          description: |
            Successful request.
          schema:
            $ref: '#/definitions/EvaluationFormDTO'
        '403':
          description: |
            The user isn't authenticated or tried to retrieve an EvaluationForm to which he does not have permission.
        '404':
          description: |
            Employee, Appraisal or EvaluationForm not found in the system.

##################################################################################################
# Definitions ####################################################################################
##################################################################################################

definitions:

  AppraisalDTO:
    type: object
    required:
      - name
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      startDate:
        type: string
        format: 'date-time'
      endDate:
        type: string
        format: 'date-time'

  EmployeeDTO:
    type: object
    properties:
      id:
        type: integer
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      gftIdentifier:
        type: string
      isAdmin:
        type: boolean
      isMentor:
        type: boolean
      isPeer:
        type: boolean
      applicationRole:
        $ref: '#/definitions/ApplicationRoleDTO'
      jobLevel:
        $ref: '#/definitions/JobLevelDTO'

  ApplicationRoleDTO:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
    required:
      - id

  JobLevelDTO:
    type: object
    properties:
      id:
        type: integer
      jobFamily:
        $ref: '#/definitions/JobFamilyDTO'
      name:
        type: string
      description:
        type: string
      expertise:
        type: string
    required:
      - id

  JobFamilyDTO:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
    required:
      - id

  RelationshipDTO:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string

  EmployeeRelationshipDTO:
    type: object
    properties:
      id:
        type: integer
      reference:
        $ref: '#/definitions/EmployeeDTO'
      relationship:
        $ref: '#/definitions/RelationshipDTO'
      startDate:
        type: string
        format: 'date-time'
      endDate:
        type: string
        format: 'date-time'
    required:
      - id

  EvaluationFormDTO:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      sections:
        type: array
        items:
          $ref: '#/definitions/EvaluationFormSectionDTO'

  EvaluationFormSectionDTO:
   type: object
   properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      questions:
        type: array
        items:
          $ref: '#/definitions/EvaluationFormQuestionDTO'

  EvaluationFormQuestionDTO:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      scoreType:
        $ref: '#/definitions/ScoreTypeDTO'

  ScoreTypeDTO:
    type: object
    properties:
      id:
        type: integer
      definition:
        type: string
      values:
        type: array
        items:
          $ref: '#/definitions/ScoreValueDTO'

  ScoreValueDTO:
    type: object
    properties:
      id:
        type: integer
      value:
        type: string
      description:
        type: string

  Pagination:
    type: array
    items:
      $ref: '#/definitions/Link'
    example:
      - rel: next
        href: 'http://example.com/some/url?page=2'
      - rel: prev
        href: 'http://example.com/some/url?page=1'
      - rel: first
        href: 'http://example.com/some/url?page=1'
      - rel: last
        href: 'http://example.com/some/url?page=100'

  Link:
    type: object
    properties:
      rel:
        type: string
      href:
        type: string
    example:
      rel: self
      href: 'http://example.com/some/url/'

  FieldErrorDTO:
    type: object
    properties:
      field:
        type: string
      message:
        type: string

  OperationResultDTO:
    type: object
    properties:
      message:
        type: string
      data:
        type: object
      errors:
        type: array
        items:
          $ref: '#/definitions/FieldErrorDTO'

tags:
  - name: Me
    description: Part of the Me controller
  - name: Employee
    description: Part of the Employee microservice
  - name: Appraisal
    description: Part of the Appraisal microservice
